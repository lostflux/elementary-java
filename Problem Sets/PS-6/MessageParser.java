import java.awt.*;

/**
 * Library to parse a message and create a shape
 */
public final class MessageParser {

    /**
     * Static function to add shape into sketch
     * @param sketch sketch to be modified
     * @param msg message to decode --> "draw shapeType x1 y1 x2 y2 colorId"
     */
    public static void addShape (Sketch sketch, String msg) {
        String[] tokens = msg.split(" ");
        String objectType = tokens[1];					// Type of object

        int x1 = Integer.parseInt(tokens[2]);			// x1
        int y1 = Integer.parseInt(tokens[3]);			// x2
        int x2 = Integer.parseInt(tokens[4]);			// y1
        int y2 = Integer.parseInt(tokens[5]);			// y2
        int colorCode = Integer.parseInt(tokens[6]);

//        Random random = new Random();
//        int shapeId = random.nextInt();
        int shapeId = Integer.parseInt(tokens[7]);		// objectId generated by server

        Shape newShape;
        switch (objectType) {
            case "rectangle" -> {
                newShape = new Rectangle(x1, y1, x2, y2, new Color(colorCode));
                sketch.push(shapeId, newShape);
            }
            case "segment" -> {
                newShape = new Segment(x1, y1, x2, y2, new Color(colorCode));
                sketch.push(shapeId, newShape);
            }
            case "ellipse" -> {
                newShape = new Ellipse(x1, y1, x2, y2, new Color(colorCode));
                sketch.push(shapeId, newShape);
            }
            default -> {
                System.err.println("Invalid shape!!");
                System.err.println("'" + msg + "' is not a valid draw message.");
            }
        }
    }

    /**
     * Static function to delete a shape from a sketch
     * @param sketch sketch to be modified
     * @param msg message containing action --> "delete (int)shapeId"
     */
    public static void deleteShape(Sketch sketch, String msg) {
        String[] tokens = msg.split(" ");
        int deleteId = Integer.parseInt(tokens[1]);
        sketch.remove(deleteId);
    }

    /**
     * Static method to move a shape in a sketch
     * @param sketch sketch to be modified
     * @param msg message --> "move objectId dx dy"
     */
    public static void moveShape(Sketch sketch, String msg) {
        String[] tokens = msg.split(" ");
        int movingId = Integer.parseInt(tokens[1]);
        int dx = Integer.parseInt(tokens[2]);
        int dy = Integer.parseInt(tokens[3]);
        sketch.getShape(movingId).moveBy(dx, dy);
    }

    /**
     * Static function to recolor an object in a sketch
     * @param sketch sketch to be modified
     * @param msg message --> "recolor objectId colorCode"
     */
    public static void recolorShape(Sketch sketch, String msg) {
        String[] tokens = msg.split(" ");
        int recoloringId = Integer.parseInt(tokens[1]);
        int colorCode = Integer.parseInt(tokens[2]);
        sketch.getShape(recoloringId).setColor(new Color(colorCode));
    }

    /**
     * Static function to get a message, find action, and call the appropriate function to
     * @param sketch  sketch to be updated
     * @param msg message to be decoded
     */
    public static void parse(Sketch sketch, String msg) {
        // Check what message action is
        if (msg.startsWith("draw")) addShape(sketch, msg);              // If draw --> add shape
        else if (msg.startsWith("delete")) deleteShape(sketch, msg);    // if delete --> delete shape
        else if (msg.startsWith("move")) moveShape(sketch, msg);        // If move --> move shape
        else if (msg.startsWith("recolor")) recolorShape(sketch, msg);  // If recolor --> recolor shape
        else {
            System.err.println("Error: " + msg + " does not have a valid action.");
        }
    }
}
